import argparse
import ConfigParser as configparser

import tofts_parameter_calculator

__author__ = 'Andrew Beers'

def parse_args():
	
	parser = argparse.ArgumentParser(description='qtim_tools.qtim_dce.process_dce_file calculates DCE parameters maps (e.g. ktrans, ve, auc) for a given 4D Nifti file.')
	
	parser.add_argument('-input', required=True, help = 'File to be processed.')
	parser.add_argument('-config', required=False, help = 'Filepath of configuration file.')

	parser.add_argument('-output_prefix', required=True, help = 'Output path to write parameters maps to. Files will be written in the format of [prefix][parameter]. For the prefix \"output_\", and example would be \"output_ktrans.nii.gz\"')
	parser.add_argument('-outputs', required=False, nargs='+', help = 'Parameter maps to generate. kTrans, Ve, and AUC maps are generated by default.')

	parser.add_argument('-label', required=False, help = 'Filepath of ROI or other labels (.nii or .nii.gz)')

	parser.add_argument('-AIF_label', required=False, help = 'Filepath of an ROI from which to generate an AIF (.nii or .nii.gz)')
	parser.add_argument('-AIF_values', required=False, help = 'Filepath of a list of AIF values (.txt, separated by \";\"). If the AIF file has fewer timepoints than the volume, the starting values will be filled in with zeros. If the AIF does not need to be converted into concentration, set -convert_AIF_values to \"False\"')
	parser.add_argument('-convert_AIF_values', required=False, help = 'If an AIF is provided, set this option to \"True\" or \"False\" to convert that AIF from intensity values to concentration values.')

	parser.add_argument('-T1_tissue', required=False, help = 'Static T1 value in tissue to be used for calculations if there is no T1 map. Default is 1000.')
	parser.add_argument('-T1_blood', required=False, help = 'Static T1 value in blood to be used for AIF calculations. Default is 1440.')
	parser.add_argument('-T1_map', required=False, help = 'Filepath to a T1 map to be used in parameter calculations')

	parser.add_argument('-relaxivity', required=False, help = 'Relaxivity of the chosen contrast agent to be used for parameter map calculations.')

def main():
	return

if __name__ == "__main__":
	main()

# def main(argv=None):

# 	if argv==None:
# 		argv = sys.argv



# 	try:
# 		opts, args = getpot.getpot(argv)

# 	except Usage, err:
# 		print(>>sys.stderr, err.msg)
# 		print(>>sys.stderr, "Invalid options/parameters. For parameter help, type -help or -h.")
# 		return 2

	tofts_parameter_calculator.calc_DCE_properties_single(filepath, label_file=[], param_file=[], AIF_label_file=[], AIF_value_data=AIF_value_data, convert_AIF_values=False, outputs=['ktrans','ve','auc'], T1_tissue=1500, T1_blood=1440, relaxivity=.0039, TR=6.8, TE=2.1, scan_time_seconds=(6*60), hematocrit=0.45, injection_start_time_seconds=160, flip_angle_degrees=10, label_suffix=[], AIF_mode='population', AIF_label_suffix='-AIF-label', AIF_label_value=1, label_mode='separate', default_population_AIF=False, initial_fitting_function_parameters=[.01,.1], outfile_prefix='mead_cobyal_high_ktrans_max_individual_ktrans_no_mask', processes=22, mask_threshold=20, mask_value=-1, gaussian_blur=.65, gaussian_blur_axis=2)

# if __name__ == '__main__':
# 	sys.exit(main())
